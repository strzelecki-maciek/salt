{% from "prometheus/prometheus.map" import prometheus with context %}

global:
  scrape_interval: {{ prometheus.global.scrape_interval }}
  scrape_timeout: {{ prometheus.global.scrape_timeout }}
  evaluation_interval: 30s
  external_labels:
    monitor: {{ prometheus.global.monitor }}
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - {{ prometheus.alertmanager }}
    scheme: http
    timeout: 10s
rule_files:
{% for rule_file in prometheus['rule_files'] -%} 
  - {{ rule_file }}
{% endfor -%}
scrape_configs:
{% for name, data in prometheus.jobs.items() %}
- job_name: {{ name }}
  {% if data['scheme'] is defined -%}
  scheme: {{ data['scheme'] }}
  {% else -%}
  scheme: http
  {% endif -%}
  {% if data['scrape_interval'] is defined -%}
  scrape_interval: {{ data['scrape_interval'] }}
  {% endif -%}
  {% if data['honor_labels'] is defined -%}
  honor_labels: {{ data['honor_labels'] }}
  {% endif -%}
  {% if data['metrics_path'] is defined -%}
  metrics_path: {{ data['metrics_path'] }}
  {% else -%}
  metrics_path: /metrics
  {% endif -%}
  {{ data['config']|indent(2) }}
  {% if data['relabel'] is defined %}
  relabel_configs:
    - source_labels: ['__address__']
      target_label: instance
      regex:  '(.*)'
      replacement: "${1}"
    - source_labels: ['__address__']
      target_label: __address__
      regex:  '(.*)'
      replacement: "${1}:{{ data['port'] }}"
  {% endif %}
{% endfor %}
